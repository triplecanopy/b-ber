// Mobile
$mq-xs: 'only screen and (max-width: 768px)';

// Tablet
$mq-sm: 'only screen and (min-width: 769px) and (max-width: 1140px)';

// Desktop 1
$mq-md: 'only screen and (min-width: 1141px) and (max-width: 1440px)';

// Desktop 2
$mq-lg: 'only screen and (min-width: 1441px) and (max-width: 1920px)';

// Desktop 3
$mq-xl: 'only screen and (min-width: 1921px)';

$break-map: (
  'xs': $mq-xs,
  'sm': $mq-sm,
  'md': $mq-md,
  'lg': $mq-lg,
  'xl': $mq-xl,
);

// Media query mixin. Accepts multiple arguments. Because the media queries are
// relatively specific, it's simpler to wrap styles in multiple queries than to
// work from a 'global' base (i.e., a 'mobile-first' strategy). Called with
// a single value, or a comma separated list of values:
//
// @include break-at('mobile-portrait') { ... }
// @include break-at('mobile-portrait', 'tablet-portrait') { .. }
@mixin break-at($media...) {
  $query: '';

  @for $i from 1 through length($media) {
    $value: map-get($break-map, nth($media, $i));

    @if not $value {
      @error "`#{$media}` is not a supported media query name.";
    }

    @if $query != '' {
      $query: '#{$query}, #{$value}';
    } @else {
      $query: $value;
    }
  }

  @media #{$query} {
    @content;
  }
}
