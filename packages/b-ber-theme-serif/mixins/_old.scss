// sass-lint:disable indentation

// Some dicts for use in functions below
$alphabet: (
  'a',
  'b',
  'c',
  'd',
  'e',
  'f',
  'g',
  'h',
  'i',
  'j',
  'k',
  'l',
  'm',
  'n',
  'o',
  'p',
  'q',
  'r',
  's',
  't',
  'u',
  'v',
  'w',
  'x',
  'y',
  'z'
);

//
// Media Queries
//

@mixin break($media) {
  @if $media == 'mobile' {
    @media #{$media-mobile} {
      @content;
    }
  } @else if $media == 'tablet' {
    @media #{$media-tablet} {
      @content;
    }
  } @else if $media == 'desktop' {
    @media #{$media-desktop} {
      @content;
    }
  } @else if $media == 'wide' {
    @media #{$media-wide} {
      @content;
    }
  } @else if $media == 'tall' {
    @media #{$media-tall} {
      @content;
    }
  } @else if $media == 'mobile-short' {
    @media #{$mobile-short} {
      @content;
    }
  } @else if $media == 'desktop-short' {
    @media #{$desktop-short} {
      @content;
    }
  } @else if $media == 'tablet-large' {
    @media #{$media-tablet-large} {
      @content;
    }
  } @else {
    @if feature-exists('at-error') == true {
      @error "`#{$media}` is not a supported media type."; // sass-lint:disable-line quotes
    } @else {
      @warn "`#{$media}` is not a supported media type."; // sass-lint:disable-line quotes
    }
  }
}

//
// Typography
//

//
// font-face utility mixin
// @example     @include font-face('Crimson', 'TC-crimson-italic-webfont', ('ttf'), 400, italic);
@mixin font-face(
  $font-name,
  $file-name,
  $formats: ('ttf', 'otf'),
  $weight: 400,
  $style: normal
) {
  $filepath: '../fonts/' + $file-name;
  @font-face {
    font-family: '#{$font-name}';
    @each $format in $formats {
      src: url($filepath+'.'+$format);
    }
    font: {
      weight: $weight;
      style: $style;
    }
  }
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      font-size: $min-font-size;
      @media screen and (min-width: $min-vw) {
        font-size: calc(
          #{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} *
            ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})
        );
      }
      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}

@mixin caption {
  @include type-settings(-7);
  line-height: 1.3;
  margin-bottom: 0;
  text-align: left;
  text-indent: 0 !important; // sass-lint:disable-line no-important
}

// General typographic settings
@mixin hyphens($hyphenation: auto) {
  -epub-hyphens: $hyphenation;
  adobe-hyphenate: $hyphenation;
  hyphens: $hyphenation;
}

@mixin widows($n: 2) {
  widows: $n;
}

@mixin orphans($n: 1) {
  orphans: $n;
}

@mixin text-rendering($value: optimizeLegibility) {
  text-rendering: $value;
}

@mixin font-smoothing {
  -webkit-font-smoothing: antialiased; // sass-lint:disable-line no-vendor-prefixes
  -moz-osx-font-smoothing: grayscale; // sass-lint:disable-line no-vendor-prefixes
}

// Remove units from a value
// @example     strip-unit(1em) // => 1
@function strip-unit($value) {
  @if type-of($value) == 'number' and not unitless($value) {
    @return $value / ($value * 0 + 1);
  }
  @return $value;
}

// Returns a unitless line-height value, relative to an element's font size.
// Calculated by using the global `$line-height-base`
// @example     line-height(11.390625em) // => 1.037037037
@function line-height($font-size) {
  @return ceil($font-size / $line-height-base) *
    ($line-height-base / $font-size);
}

// Returns a value for a single line-height unit in `em`s, relative to the
// element's font-size. Useful for consistently spacing top/bottom
// margin/padding
// @example     adjust-line-height-value(0) // => 1.3125em
// @example     adjust-line-height-value(6) // => 0.1152263374em
@function adjust-line-height-value($value) {
  @return $line-height-base / strip-unit(ms($value)) + 0em;
}

// Returns a value for a single em in `em`s, relative to the
// element's font-size.
// @example     adjust-font-size-value(1) // => 1em
// @example     adjust-font-size-value(2) // => 2em
@function adjust-font-size-value($value) {
  // @return $font-size-base / strip-unit(ms($value)) + 0em;
  @return strip-unit(ms($value)) + 0em;
}

// Compose typographic styles
@mixin type-settings($value) {
  font-size: ms($value);
  line-height: line-height(ms($value));
  @if $vertical-space == true {
    margin-bottom: adjust-line-height-value($value);
  }
}

// Abstract wrappers for element spacing
// @param $n        int     How many spaces?
// @param $value    int     The modular scale index of the element
@function n-lines($n, $value) {
  @return adjust-line-height-value($value) * $n + 0em;
}
@function n-ems($n, $value) {
  @return adjust-font-size-value($value) * $n + 0em;
}

// Convenience wrappers for element spacing.
// @param $value    int     The modular scale index of the element
// @example         margin-top: one-line(0); // => margin-top: 1.3125em;
@function one-line($value) {
  @return n-lines(1, $value);
}
@function two-lines($value) {
  @return n-lines(2, $value);
}
@function three-lines($value) {
  @return n-lines(3, $value);
}
@function four-lines($value) {
  @return n-lines(4, $value);
}
@function five-lines($value) {
  @return n-lines(5, $value);
}

// @param   $value  int     The modular scale index of the element
// @example         margin-top: one-em(0); // => margin-top: 1em;
@function one-em($value) {
  @return n-ems(1, $value);
}
@function two-ems($value) {
  @return n-ems(2, $value);
}
@function three-ems($value) {
  @return n-ems(3, $value);
}
@function four-ems($value) {
  @return n-ems(4, $value);
}
@function five-ems($value) {
  @return n-ems(5, $value);
}

// CSS Grid functions
// Height of each row as percentage of window height
$grid-row-height-percentage: (100% - $grid-row-gap-percentage) /
  $grid-column-count;

@function grid-template-repeater($char, $n) {
  $str: '';

  @for $i from 1 through $n {
    $str: $str + $char + $i + ' ';
  }

  @return unquote($str);
}

// Creates rows for the CSS grid-template property
// prettier-ignore
@function grid-template($column-count: $grid-column-count, $row-size: 'auto') {
    $str: '';
    @for $i from 1 through $grid-row-count {
        $letter: nth($alphabet, $i);
        $column-names: grid-template-repeater($letter, $column-count);
        $str: $str + "[row-#{$i}-start] '#{$column-names}' #{$row-size} [row-#{$i}-end] ";
    }

    $str: $str + '/ auto';
    @return unquote($str);
}

// Creates the vertical and horizontal gaps (gutters) for the CSS grid-gap property
// prettier-ignore
@function grid-gap() {
    @return unquote("#{strip-unit($grid-row-gap-percentage) * 1%} #{strip-unit($grid-column-gap-percentage) * 1%}");
}

@mixin grid-layout {
  $row-height: (100% - strip-unit($grid-row-gap-percentage)) / $grid-row-count;

  display: grid;
  grid-template: grid-template($grid-column-count, $row-height);
  grid-gap: grid-gap();

  @include break-at('xs') {
    grid-template: grid-template(round($grid-column-count / 2), 'auto');
  }
}

@function grid-item() {
  @if $grid-column-end != '' {
    @return unquote('#{$grid-column-start} / #{$grid-column-end}');
  } @else {
    @return unquote('#{$grid-column-start}');
  }
}

// Add padding programatically based on font-size
// @param $top      int     Number of line-height units at type-settings(0) to add as padding-top
// @param $left     int     Number of `em`s at type-settings(0) to add as padding-left
// @param $bottom   int     Number of line-height units at type-settings(0) to add as padding-bottom
// @param $right    int     Number of `em`s at type-settings(0) to add as padding-right
// @param $value    int     Elements type-settings index
// @example         padding: @include padding(1, 1, 1, 1, 0); // => padding: 1em 1.3125em 1em 1.3125em;
@mixin padding($top, $right, $bottom, $left, $value) {
  padding: adjust-line-height-value($value) * $top + 0em
    adjust-font-size-value($value) * $right + 0em
    adjust-line-height-value($value) * $bottom + 0em
    adjust-font-size-value($value) * $left + 0em;
}

// Defaults to 16px, assuming the `html` element's base font size
@function em-to-px($value, $root-px: 16px) {
  @return strip-unit($value) * strip-unit($root-px) + 0px;
}

@mixin following-paragraph-not-indented {
  + p {
    text-indent: 0 !important; // sass-lint:disable-line no-important
  }
}
@mixin paragraph-not-indented {
  text-indent: 0 !important; // sass-lint:disable-line no-important
  padding-bottom: one-line(0);
}
@mixin following-element-has-no-top-padding {
  + table,
  + ul,
  + ol,
  + dl,
  + blockquote {
    padding-top: 0;
  }
  + hr {
    margin-top: one-line(0);
  }
}

@mixin bullet-container {
  text-indent: 0;
  margin-left: one-em(0);
}

@mixin bullet {
  display: inline-block;
  text-indent: one-em(0) * -1;
}

// Alert colours
$alert: (
  'info': $info,
  'warning': $warning,
  'danger': $danger,
  'success': $success,
);
